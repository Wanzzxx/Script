if game.PlaceId ~= 121864768012064 then return end

if not game:IsLoaded() then
    game.Loaded:Wait()
end

-- Load Fluent UI
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- Create Window
local Window = Fluent:CreateWindow({
    Title = "Fish It [Wanz HUB]",
    SubTitle = "PRIVATE TESTING",
    TabWidth = 120,
    Size = UDim2.fromOffset(480, 360),
    Acrylic = true,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local player = Players.LocalPlayer

local logoGui = Instance.new("ScreenGui")
logoGui.Name = "FluentLogoToggle"
logoGui.ResetOnSpawn = false
logoGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
logoGui.Parent = player:WaitForChild("PlayerGui")

local logoButton = Instance.new("ImageButton")
logoButton.Name = "LogoButton"
logoButton.Size = UDim2.new(0, 50, 0, 50)
logoButton.Position = UDim2.new(0, 10, 0, 10)
logoButton.BackgroundTransparency = 1
logoButton.Image = "rbxassetid://98905775020119"
logoButton.Parent = logoGui

local isMinimized = false
local function toggleFluent()
    isMinimized = not isMinimized
    Window:Minimize(isMinimized)
end

logoButton.Activated:Connect(toggleFluent)

UserInputService.InputBegan:Connect(function(input, gpe)
    if not gpe and input.KeyCode == Enum.KeyCode.LeftControl then
        toggleFluent()
    end
end)

-- Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Fishing", Icon = "users" }),
    Teleport = Window:AddTab({ Title = "Teleport", Icon = "home" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "layers" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

-- References
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Net = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("sleitnick_net@0.2.0"):WaitForChild("net")

local EquipToolFromHotbar = Net:WaitForChild("RE/EquipToolFromHotbar")
local ChargeFishingRod = Net:WaitForChild("RF/ChargeFishingRod")
local RequestFishingMinigameStarted = Net:WaitForChild("RF/RequestFishingMinigameStarted")
local FishingCompleted = Net:WaitForChild("RE/FishingCompleted")
local SellAllItems = Net:WaitForChild("RF/SellAllItems")

-- Auto Fishing Toggle
Options.AutoFishing = Tabs.Main:AddToggle("AutoFishing", {
    Title = "Auto Fishing",
    Default = false
})

Options.AutoFishing:OnChanged(function()
    if Options.AutoFishing.Value then
        Fluent:Notify({ Title = "Fishing", Content = "Auto fishing started", Duration = 5 })
        
        task.spawn(function()
            while Options.AutoFishing.Value do
                -- Step 1: EquipToolFromHotbar
                local args0 = {1}
                EquipToolFromHotbar:FireServer(unpack(args0))
                task.wait(0.4)

                -- Step 2: ChargeFishingRod
                local args1 = {1758804029.427071}
                ChargeFishingRod:InvokeServer(unpack(args1))
                task.wait(0.4)

                -- Step 3: RequestFishingMinigameStarted
                local args2 = {-1.233184814453125, 0.9974901105656968}
                RequestFishingMinigameStarted:InvokeServer(unpack(args2))
                task.wait(0.4)

                -- Step 4: Wait 1.5s before FishingCompleted
                task.wait(1)
                FishingCompleted:FireServer()

                task.wait(1) -- delay before next loop
            end
        end)
    else
        Fluent:Notify({ Title = "Fishing", Content = "Auto fishing stopped", Duration = 5 })
    end
end)

local Player = game:GetService("Players").LocalPlayer
local savedFishingCFrame = nil
local saveFile = "FishingLocation.txt"

-- Load saved location if file exists
if isfile and isfile(saveFile) then
    local data = readfile(saveFile)
    local x, y, z = string.match(data, "([^,]+),([^,]+),([^,]+)")
    if x and y and z then
        savedFishingCFrame = CFrame.new(tonumber(x), tonumber(y), tonumber(z))
        Fluent:Notify({
            Title = "Fishing Spot",
            Content = "Loaded saved fishing location",
            Duration = 4
        })
    end
end

-- Save Fishing Location Button
Tabs.Main:AddButton({
    Title = "Save Fishing Location",
    Callback = function()
        local hrp = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            savedFishingCFrame = hrp.CFrame
            if writefile then
                writefile(saveFile, string.format("%f,%f,%f", hrp.Position.X, hrp.Position.Y, hrp.Position.Z))
            end
            Fluent:Notify({
                Title = "Fishing Spot",
                Content = "Saved your fishing location",
                Duration = 4
            })
        else
            Fluent:Notify({
                Title = "Fishing Spot",
                Content = "Failed to save (no HumanoidRootPart)",
                Duration = 4
            })
        end
    end
})

-- Teleport to Saved Location Toggle
Options.TeleportSaved = Tabs.Main:AddToggle("TeleportSaved", {
    Title = "Teleport To Saved Location",
    Default = false,
    Callback = function(state)
        if state then
            if savedFishingCFrame and Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
                Player.Character.HumanoidRootPart.CFrame = savedFishingCFrame + Vector3.new(0, 5, 0)
                Fluent:Notify({
                    Title = "Fishing Spot",
                    Content = "Teleported to saved location",
                    Duration = 4
                })
            else
                Fluent:Notify({
                    Title = "Fishing Spot",
                    Content = "No saved location found. Save one first",
                    Duration = 4
                })
                Options.TeleportSaved:SetValue(false)
            end
        end
    end
})

-- Sell All Fish Toggle
Options.SellAllFish = Tabs.Main:AddToggle("SellAllFish", {
    Title = "Sell All Fish",
    Default = false
})

Options.SellAllFish:OnChanged(function()
    if Options.SellAllFish.Value then
        Fluent:Notify({ Title = "Fishing", Content = "Auto selling fish started", Duration = 5 })
        
        task.spawn(function()
            while Options.SellAllFish.Value do
                SellAllItems:InvokeServer()
                task.wait(1) -- fire every 1s
            end
        end)
    else
        Fluent:Notify({ Title = "Fishing", Content = "Auto selling fish stopped", Duration = 5 })
    end
end)

-- Teleport

-- Teleport Dropdown
local TeleportParent = workspace:WaitForChild("!!!! ISLAND LOCATIONS !!!!")
local Player = game:GetService("Players").LocalPlayer

-- Function to refresh island names
local function getIslandNames()
    local names = {}
    for _, child in ipairs(TeleportParent:GetChildren()) do
        table.insert(names, child.Name)
    end
    return names
end

Options.TeleportIsland = Tabs.Teleport:AddDropdown("TeleportIsland", {
    Title = "Teleport to Island",
    Values = getIslandNames(),
    Default = nil
})

-- Update dropdown if new islands are added
TeleportParent.ChildAdded:Connect(function()
    Options.TeleportIsland:SetValues(getIslandNames())
end)
TeleportParent.ChildRemoved:Connect(function()
    Options.TeleportIsland:SetValues(getIslandNames())
end)

-- Handle teleport when changed
Options.TeleportIsland:OnChanged(function(selected)
    if not selected then return end
    local target = TeleportParent:FindFirstChild(selected)
    if target and target:IsA("BasePart") then
        Player.Character:WaitForChild("HumanoidRootPart").CFrame = target.CFrame + Vector3.new(0, 5, 0)
        Fluent:Notify({
            Title = "Teleport",
            Content = "Teleported to " .. selected,
            Duration = 4
        })
    end
end)

-- Helper: get children names
local function getChildNames(parent)
    local names = {}
    for _, child in ipairs(parent:GetChildren()) do
        table.insert(names, child.Name)
    end
    return names
end

-- Helper: get CFrame from model
local function getModelCFrame(model)
    if model:IsA("Model") then
        if model.PrimaryPart then
            return model.PrimaryPart.CFrame
        elseif model:FindFirstChild("HumanoidRootPart") then
            return model.HumanoidRootPart.CFrame
        else
            local firstPart = model:FindFirstChildWhichIsA("BasePart")
            if firstPart then
                return firstPart.CFrame
            end
        end
    end
    return nil
end

--  Teleport to NPC
Options.TeleportNPC = Tabs.Teleport:AddDropdown("TeleportNPC", {
    Title = "Teleport to NPC",
    Values = getChildNames(workspace:WaitForChild("NPC")),
    Default = nil
})

Options.TeleportNPC:OnChanged(function(selected)
    if not selected then return end
    local target = workspace.NPC:FindFirstChild(selected)
    local cf = target and getModelCFrame(target)
    if cf then
        Player.Character:WaitForChild("HumanoidRootPart").CFrame = cf + Vector3.new(0, 5, 0)
        Fluent:Notify({
            Title = "Teleport",
            Content = "Teleported to NPC: " .. selected,
            Duration = 4
        })
    end
end)

--  Teleport to Misc
Options.TeleportMisc = Tabs.Teleport:AddDropdown("TeleportMisc", {
    Title = "Teleport to Misc",
    Values = getChildNames(workspace:WaitForChild("!!! MENU RINGS")),
    Default = nil
})

Options.TeleportMisc:OnChanged(function(selected)
    if not selected then return end
    local target = workspace["!!! MENU RINGS"]:FindFirstChild(selected)
    local cf = target and getModelCFrame(target)
    if cf then
        Player.Character:WaitForChild("HumanoidRootPart").CFrame = cf + Vector3.new(0, 5, 0)
        Fluent:Notify({
            Title = "Teleport",
            Content = "Teleported to Misc: " .. selected,
            Duration = 4
        })
    end
end)

-- Settings Section
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("W-Hub")
SaveManager:SetFolder("W-Hub/FishIt")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

task.spawn(function()
    local VirtualUser = game:GetService("VirtualUser")
    local player = game:GetService("Players").LocalPlayer

    player.Idled:Connect(function()
        VirtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        task.wait(1)
        VirtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    end)
end)

Window:SelectTab(1)
Fluent:Notify({ Title = "Fluent", Content = "Loaded.", Duration = 8 })
SaveManager:LoadAutoloadConfig()
