if game.PlaceId ~= 121864768012064 then return end

if not game:IsLoaded() then
    game.Loaded:Wait()
end

-- Load Fluent UI
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- Create Window
local Window = Fluent:CreateWindow({
    Title = "Fish It [Wanz HUB]",
    SubTitle = "PRIVATE TESTING",
    TabWidth = 120,
    Size = UDim2.fromOffset(480, 360),
    Acrylic = true,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local player = Players.LocalPlayer

-- Logo toggle
local logoGui = Instance.new("ScreenGui")
logoGui.Name = "FluentLogoToggle"
logoGui.ResetOnSpawn = false
logoGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
logoGui.Parent = player:WaitForChild("PlayerGui")

local logoButton = Instance.new("ImageButton")
logoButton.Name = "LogoButton"
logoButton.Size = UDim2.new(0, 50, 0, 50)
logoButton.Position = UDim2.new(0, 10, 0, 10)
logoButton.BackgroundTransparency = 1
logoButton.Image = "rbxassetid://98905775020119"
logoButton.Parent = logoGui

local isMinimized = false
local function toggleFluent()
    isMinimized = not isMinimized
    Window:Minimize(isMinimized)
end
logoButton.Activated:Connect(toggleFluent)
UserInputService.InputBegan:Connect(function(input, gpe)
    if not gpe and input.KeyCode == Enum.KeyCode.LeftControl then
        toggleFluent()
    end
end)

-- Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Fishing", Icon = "users" }),
    Event = Window:AddTab({ Title = "Fish Events", Icon = "map" }),
    Teleport = Window:AddTab({ Title = "Teleport", Icon = "globe" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "layers" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}
local Options = Fluent.Options

-- Utility functions (must be defined before they are used)
local function getChildNames(parent)
    local names = {}
    if parent then
        for _, child in ipairs(parent:GetChildren()) do
            table.insert(names, child.Name)
        end
    end
    return names
end

local function getModelCFrame(model)
    if not model then return nil end
    if model:IsA("Model") then
        if model.PrimaryPart then return model.PrimaryPart.CFrame end
        if model:FindFirstChild("HumanoidRootPart") then return model.HumanoidRootPart.CFrame end
        local firstPart = model:FindFirstChildWhichIsA("BasePart", true)
        if firstPart then return firstPart.CFrame end
    elseif model:IsA("BasePart") then
        return model.CFrame
    end
    return nil
end

local function canTeleport()
    return not (Options.AutoFishing.Value and Options.TeleportSaved.Value)
end

-- References
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Net = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("sleitnick_net@0.2.0"):WaitForChild("net")
local EquipToolFromHotbar = Net:WaitForChild("RE/EquipToolFromHotbar")
local ChargeFishingRod = Net:WaitForChild("RF/ChargeFishingRod")
local RequestFishingMinigameStarted = Net:WaitForChild("RF/RequestFishingMinigameStarted")
local FishingCompleted = Net:WaitForChild("RE/FishingCompleted")
local SellAllItems = Net:WaitForChild("RF/SellAllItems")

-- Fishing Delay input
Options.FishingDelay = Tabs.Main:AddInput("FishingDelay", {
    Title = "Set Catch Delay(s)",
    Default = "4",
    Placeholder = "Enter seconds",
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        local num = tonumber(Value)
        if num then
            Fluent:Notify({ Title = "Fishing Delay", Content = "Set delay to " .. num .. " seconds", Duration = 4 })
        else
            Fluent:Notify({ Title = "Fishing Delay", Content = "Invalid number, using default (4)", Duration = 4 })
        end
    end
})

-- Auto Reset Character Every (s)
Options.AutoReset = Tabs.Main:AddInput("AutoReset", {
    Title = "Auto Reset Character Every (s)",
    Default = "",
    Placeholder = "Enter seconds",
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        local num = tonumber(Value)
        if num and num > 0 then
            Fluent:Notify({
                Title = "Auto Reset",
                Content = "Character will reset every " .. num .. " seconds",
                Duration = 4
            })
            task.spawn(function()
                while tonumber(Options.AutoReset.Value) and tonumber(Options.AutoReset.Value) > 0 do
                    task.wait(tonumber(Options.AutoReset.Value))
                    if player.Character and player.Character:FindFirstChild("Humanoid") then
                        player:LoadCharacter()
                    end
                end
            end)
        else
            Fluent:Notify({
                Title = "Auto Reset",
                Content = "Auto Reset disabled",
                Duration = 4
            })
        end
    end
})

-- Auto Fishing
local firstAutoFishingRun = true
Options.AutoFishing = Tabs.Main:AddToggle("AutoFishing", { Title = "Auto Fishing", Default = false })
Options.AutoFishing:OnChanged(function()
    if Options.AutoFishing.Value then
        Fluent:Notify({ Title = "Fishing", Content = "Auto fishing started", Duration = 5 })
        task.spawn(function()
            if firstAutoFishingRun then
                task.wait(3)
                firstAutoFishingRun = false
            end
            while Options.AutoFishing.Value do
                EquipToolFromHotbar:FireServer(1)
                task.wait(0.4)
                ChargeFishingRod:InvokeServer(1758804029.427071)
                task.wait(0.4)
                RequestFishingMinigameStarted:InvokeServer(-1.233184814453125, 0.9974901105656968)
                task.wait(0.4)
                local delayTime = tonumber(Options.FishingDelay.Value) or 4
                task.wait(delayTime)
                FishingCompleted:FireServer()
                task.wait(1)
            end
        end)
    else
        Fluent:Notify({ Title = "Fishing", Content = "Auto fishing stopped", Duration = 5 })
    end
end)

-- Save / Teleport fishing location
local savedFishingPos, savedFishingLook
local saveFile = "FishingLocation.txt"
if isfile and isfile(saveFile) then
    local data = readfile(saveFile)
    local px, py, pz, lx, ly, lz = string.match(data, "([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+)")
    if px and lx then
        savedFishingPos = Vector3.new(tonumber(px), tonumber(py), tonumber(pz))
        savedFishingLook = Vector3.new(tonumber(lx), tonumber(ly), tonumber(lz))
        Fluent:Notify({ Title = "Fishing Spot", Content = "Loaded saved fishing location", Duration = 4 })
    end
end
Tabs.Main:AddButton({
    Title = "Save Fishing Location",
    Callback = function()
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            savedFishingPos = hrp.Position
            savedFishingLook = hrp.CFrame.LookVector
            if writefile then
                writefile(saveFile, string.format("%f,%f,%f,%f,%f,%f",
                    savedFishingPos.X, savedFishingPos.Y, savedFishingPos.Z,
                    savedFishingLook.X, savedFishingLook.Y, savedFishingLook.Z))
            end
            Fluent:Notify({ Title = "Fishing Spot", Content = "Saved your fishing location", Duration = 4 })
        end
    end
})
Options.TeleportSaved = Tabs.Main:AddToggle("TeleportSaved", {
    Title = "Teleport To Saved Location",
    Default = false,
    Callback = function(state)
        if state and savedFishingPos and savedFishingLook then
            local hrp = player.Character:WaitForChild("HumanoidRootPart")
            local targetPos = savedFishingPos + Vector3.new(0, 5, 0)
            local lookTarget = targetPos + savedFishingLook
            hrp.CFrame = CFrame.new(targetPos, lookTarget)
            Fluent:Notify({ Title = "Fishing Spot", Content = "Teleported to saved location", Duration = 4 })
        elseif state then
            Fluent:Notify({ Title = "Fishing Spot", Content = "No saved location found", Duration = 4 })
            Options.TeleportSaved:SetValue(false)
        end
    end
})

-- Auto Sell
Options.SellAllFish = Tabs.Main:AddToggle("SellAllFish", { Title = "Sell All Fish", Default = false })
Options.SellAllFish:OnChanged(function()
    if Options.SellAllFish.Value then
        Fluent:Notify({ Title = "Fishing", Content = "Auto selling fish started", Duration = 5 })
        task.spawn(function()
            while Options.SellAllFish.Value do
                SellAllItems:InvokeServer()
                task.wait(1)
            end
        end)
    else
        Fluent:Notify({ Title = "Fishing", Content = "Auto selling fish stopped", Duration = 5 })
    end
end)

-- === EVENT SECTION ===
local EventFolder = workspace:FindFirstChild("!!! MENU RINGS") and workspace["!!! MENU RINGS"]:FindFirstChild("Props")

-- Auto Fishing Event Dropdown
Options.AutoFishingEvent = Tabs.Event:AddDropdown("AutoFishingEvent", {
    Title = "Auto Fishing Event",
    Values = EventFolder and getChildNames(EventFolder) or {},
    Default = nil
})

-- Refresh Button
Tabs.Event:AddButton({
    Title = "Refresh Events",
    Callback = function()
        EventFolder = workspace:FindFirstChild("!!! MENU RINGS") and workspace["!!! MENU RINGS"]:FindFirstChild("Props")
        if EventFolder then
            Options.AutoFishingEvent:SetValues(getChildNames(EventFolder))
            Fluent:Notify({ Title = "Events", Content = "Events refreshed", Duration = 3 })
        else
            Options.AutoFishingEvent:SetValues({})
            Fluent:Notify({ Title = "Events", Content = "Props folder not found", Duration = 3 })
        end
    end
})

-- Teleport To Event Toggle
Options.TeleportEvent = Tabs.Event:AddToggle("TeleportEvent", {
    Title = "Teleport To Event",
    Default = false,
    Callback = function(state)
        if state then
            local selected = Options.AutoFishingEvent and Options.AutoFishingEvent.Value
            if not selected then
                Fluent:Notify({ Title = "Teleport", Content = "Select an Event in 'Auto Fishing Event' first", Duration = 4 })
                return
            end
            if not canTeleport() then
                -- Do nothing but allow toggle to stay ON
                Fluent:Notify({ Title = "Teleport", Content = "Blocked (TeleportSaved active)", Duration = 4 })
                return
            end

            EventFolder = workspace:FindFirstChild("!!! MENU RINGS") and workspace["!!! MENU RINGS"]:FindFirstChild("Props")
            if not EventFolder then
                Fluent:Notify({ Title = "Teleport", Content = "Props folder not found", Duration = 4 })
                return
            end

            local target = EventFolder:FindFirstChild(selected)
            local cf = target and getModelCFrame(target)
            if cf then
                local hrp = player.Character:WaitForChild("HumanoidRootPart")
                hrp.CFrame = cf + Vector3.new(0, 5, 0)
                hrp.Anchored = false
                Fluent:Notify({ Title = "Teleport", Content = "Found Event: " .. selected, Duration = 4 })
            else
                Fluent:Notify({ Title = "Teleport", Content = "Event not found: " .. selected, Duration = 4 })
            end
        else
            -- Unanchor when toggle is off
            local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                hrp.Anchored = false
                Fluent:Notify({ Title = "Teleport", Content = "Unanchored, free to move again", Duration = 4 })
            end
        end
    end
})

-- Teleport setup
local TeleportParent = workspace:FindFirstChild("!!!! ISLAND LOCATIONS !!!!")
local NPCFolder = workspace:FindFirstChild("NPC")
local MiscFolder = workspace:FindFirstChild("!!! MENU RINGS")

-- Dropdowns
if TeleportParent then
    Options.TeleportIsland = Tabs.Teleport:AddDropdown("TeleportIsland", {
        Title = "Teleport to Island",
        Values = getChildNames(TeleportParent),
        Default = nil
    })
    Options.TeleportIsland:OnChanged(function(selected)
        if not selected or not canTeleport() then return end
        local cf = getModelCFrame(TeleportParent:FindFirstChild(selected))
        if cf then
            player.Character:WaitForChild("HumanoidRootPart").CFrame = cf + Vector3.new(0, 5, 0)
            Fluent:Notify({ Title = "Teleport", Content = "Teleported to Island: " .. selected, Duration = 4 })
        end
    end)
end
if NPCFolder then
    Options.TeleportNPC = Tabs.Teleport:AddDropdown("TeleportNPC", {
        Title = "Teleport to NPC",
        Values = getChildNames(NPCFolder),
        Default = nil
    })
    Options.TeleportNPC:OnChanged(function(selected)
        if not selected or not canTeleport() then return end
        local cf = getModelCFrame(NPCFolder:FindFirstChild(selected))
        if cf then
            player.Character:WaitForChild("HumanoidRootPart").CFrame = cf + Vector3.new(0, 5, 0)
            Fluent:Notify({ Title = "Teleport", Content = "Teleported to NPC: " .. selected, Duration = 4 })
        end
    end)
end
if MiscFolder then
    Options.TeleportMisc = Tabs.Teleport:AddDropdown("TeleportMisc", {
        Title = "Teleport to Misc",
        Values = getChildNames(MiscFolder),
        Default = nil
    })
    Options.TeleportMisc:OnChanged(function(selected)
        if not selected or not canTeleport() then return end
        local cf = getModelCFrame(MiscFolder:FindFirstChild(selected))
        if cf then
            player.Character:WaitForChild("HumanoidRootPart").CFrame = cf + Vector3.new(0, 5, 0)
            Fluent:Notify({ Title = "Teleport", Content = "Teleported to Misc: " .. selected, Duration = 4 })
        end
    end)
end

-- Teleport to Enchanting Altar
Tabs.Teleport:AddButton({
    Title = "Teleport To Enchanting Altar",
    Callback = function()
        local altar = workspace:FindFirstChild("! ENCHANTING ALTAR !")
        if altar and altar:FindFirstChild("EnchantLocation") then
            local cf = getModelCFrame(altar.EnchantLocation)
            if cf then
                player.Character:WaitForChild("HumanoidRootPart").CFrame = cf
                Fluent:Notify({
                    Title = "Teleport",
                    Content = "Teleported to Enchanting Altar",
                    Duration = 4
                })
            end
        end
    end
})

-- Teleport to Ghostfinn Rod Location
Tabs.Teleport:AddButton({
    Title = "Ghostfinn Rod Location [Deep Sea Quest]",
    Callback = function()
        local hrp = player.Character and player.Character:WaitForChild("HumanoidRootPart")
        if hrp then
            hrp.CFrame = CFrame.new(
                -3745.10962, -136.108429, -1049.05969,
                 0.962240815,  5.12529708e-09,  0.272199631,
                -1.09520455e-08, 1,             1.98869046e-08,
                -0.272199631,   -2.2117133e-08, 0.962240815
            )
            Fluent:Notify({
                Title = "Teleport",
                Content = "Teleported to Ghostfinn Rod Location",
                Duration = 4
            })
        end
    end
})

-- Teleport to Ares Rod Stand
Tabs.Teleport:AddButton({
    Title = "Ares Rod Location [3M Coins]",
    Callback = function()
        local menu = workspace:FindFirstChild("!!! MENU RINGS")
        if menu and menu:FindFirstChild("Ares Rod Stand") then
            local cf = getModelCFrame(menu["Ares Rod Stand"])
            if cf then
                player.Character:WaitForChild("HumanoidRootPart").CFrame = cf
                Fluent:Notify({
                    Title = "Teleport",
                    Content = "Teleported to Ares Rod Stand",
                    Duration = 4
                })
            end
        end
    end
})

-- Teleport to Angler Rod Stand
Tabs.Teleport:AddButton({
    Title = "Angler Rod Location [8M Coins]",
    Callback = function()
        local menu = workspace:FindFirstChild("!!! MENU RINGS")
        if menu and menu:FindFirstChild("Angler Rod Stand") then
            local cf = getModelCFrame(menu["Angler Rod Stand"])
            if cf then
                player.Character:WaitForChild("HumanoidRootPart").CFrame = cf
                Fluent:Notify({
                    Title = "Teleport",
                    Content = "Teleported to Angler Rod Stand",
                    Duration = 4
                })
            end
        end
    end
})

-- Misc

-- Fish Radar Toggle (Misc Tab)
Options.FishRadar = Tabs.Misc:AddToggle("FishRadar", {
    Title = "Fish Radar",
    Default = false,
    Callback = function(state)
        local args = {
            [1] = state -- true = enable, false = disable
        }
        local Net = game:GetService("ReplicatedStorage")
            .Packages._Index:FindFirstChild("sleitnick_net@0.2.0").net

        local updateRadar = Net:FindFirstChild("RF/UpdateFishingRadar")
        if updateRadar then
            updateRadar:InvokeServer(unpack(args))
        end
    end
})

-- Settings
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("W-Hub")
SaveManager:SetFolder("W-Hub/FishIt")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

-- Detect Zero Hp
local function handleDeath()
    if Options.AutoFishing.Value then
        Options.AutoFishing:SetValue(false)
    end
    if Options.TeleportSaved.Value then
        Options.TeleportSaved:SetValue(false)
    end

    -- Wait for respawn
    player.CharacterAdded:Wait()
    local newChar = player.Character or player.CharacterAdded:Wait()
    local newHum = newChar:WaitForChild("Humanoid")

    -- Wait until fully alive
    repeat task.wait() until newHum.Health > 0
    task.wait(3)

    if newHum.Health > 0 then
        Options.AutoFishing:SetValue(true)
        Options.TeleportSaved:SetValue(true)
    end
end

task.spawn(function()
    while task.wait(1) do
        local char = player.Character
        local hum = char and char:FindFirstChild("Humanoid")
        if hum and hum.Health <= 0 then
            handleDeath()
        end
    end
end)

-- Anti-AFK
task.spawn(function()
    local VirtualUser = game:GetService("VirtualUser")
    player.Idled:Connect(function()
        VirtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        task.wait(1)
        VirtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    end)
end)

Window:SelectTab(1)
Fluent:Notify({ Title = "Fluent", Content = "Loaded.", Duration = 8 })
SaveManager:LoadAutoloadConfig()
