-- Fish It converted to MacLib UI (no Fluent / no SaveManager)
if game.PlaceId ~= 121864768012064 then return end
if not game:IsLoaded() then game.Loaded:Wait() end

-- Load MacLib (Example style)
local MacLib = loadstring(game:HttpGet("https://github.com/biggaboy212/Maclib/releases/latest/download/maclib.txt"))()

local Window = MacLib:Window({
    Title = "Fish It [Wanz HUB]",
    Subtitle = "PRIVATE TESTING",
    Size = UDim2.fromOffset(900, 700),
    Keybind = Enum.KeyCode.LeftControl,
    AcrylicBlur = true,
})

-- Create tab group + tabs
local tabGroups = { TabGroup1 = Window:TabGroup() }
local tabs = {
    Main = tabGroups.TabGroup1:Tab({ Name = "Fishing" }),
    Event = tabGroups.TabGroup1:Tab({ Name = "Fish Events" }),
    Teleport = tabGroups.TabGroup1:Tab({ Name = "Teleport" }),
    Misc = tabGroups.TabGroup1:Tab({ Name = "Misc" }),
    Settings = tabGroups.TabGroup1:Tab({ Name = "Settings" })
}

-- sections (Main)
local mainLeft = tabs.Main:Section({ Side = "Left" })
local mainRight = tabs.Main:Section({ Side = "Right" })

-- sections (Event)
local eventLeft = tabs.Event:Section({ Side = "Left" })
local eventRight = tabs.Event:Section({ Side = "Right" })

-- sections (Teleport)
local teleportLeft = tabs.Teleport:Section({ Side = "Left" })
local teleportRight = tabs.Teleport:Section({ Side = "Right" })

-- sections (Misc)
local miscLeft = tabs.Misc:Section({ Side = "Left" })
local miscRight = tabs.Misc:Section({ Side = "Right" })

-- small utility & references
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local player = Players.LocalPlayer

local Net = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("sleitnick_net@0.2.0"):WaitForChild("net")
local EquipToolFromHotbar = Net:WaitForChild("RE/EquipToolFromHotbar")
local ChargeFishingRod = Net:WaitForChild("RF/ChargeFishingRod")
local RequestFishingMinigameStarted = Net:WaitForChild("RF/RequestFishingMinigameStarted")
local FishingCompleted = Net:WaitForChild("RE/FishingCompleted")
local SellAllItems = Net:WaitForChild("RF/SellAllItems")
local UpdateFishingRadar = Net:FindFirstChild("RF/UpdateFishingRadar") -- may be nil

-- helpers
local function getChildNames(parent)
    local names = {}
    if parent then
        for _, child in ipairs(parent:GetChildren()) do
            table.insert(names, child.Name)
        end
    end
    return names
end

-- recursive model cframe resolver (supports inner models)
local function getModelCFrame(model)
    if not model then return nil end
    if model:IsA("Model") then
        if model.PrimaryPart then return model.PrimaryPart.CFrame end
        if model:FindFirstChild("HumanoidRootPart") then return model.HumanoidRootPart.CFrame end
        -- check inner models first
        local inner = model:FindFirstChildWhichIsA("Model")
        if inner then
            local cf = getModelCFrame(inner)
            if cf then return cf end
        end
        local firstPart = model:FindFirstChildWhichIsA("BasePart", true)
        if firstPart then return firstPart.CFrame end
    elseif model:IsA("BasePart") then
        return model.CFrame
    end
    return nil
end

local function canTeleport()
    -- guarded: you may want to block teleports when TeleportSaved and AutoFishing active
    local af = autoFishingToggle and autoFishingToggle:GetState()
    local ts = teleportSavedToggle and teleportSavedToggle:GetState()
    return not (af and ts)
end

-- state holders
local savedFishingPos, savedFishingLook = nil, nil

-- UI ELEMENTS AND LOGIC
-- Main tab: controls (left)
local autoFishingToggle = mainLeft:Toggle({
    Name = "Auto Fishing",
    Default = false,
    Callback = function(val)
        Window:Notify({
            Title = "Auto Fishing",
            Description = (val and "Auto fishing started" or "Auto fishing stopped"),
            Lifetime = 4
        })
    end
})

local fishingDelayInput = mainLeft:Input({
    Name = "Set Catch Delay (s)",
    Placeholder = "4",
    Callback = function(val)
        local num = tonumber(val) or 4
        Window:Notify({ Title = "Fishing Delay", Description = "Set delay to "..num.."s", Lifetime = 3 })
    end
}, "FishingDelay")

local saveLocationButton = mainLeft:Button({
    Name = "Save Fishing Location",
    Callback = function()
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            savedFishingPos = hrp.Position
            savedFishingLook = hrp.CFrame.LookVector
            Window:Notify({ Title = "Fishing Spot", Description = "Saved your fishing location", Lifetime = 4 })
        end
    end
})

local teleportSavedToggle = mainLeft:Toggle({
    Name = "Teleport To Saved Location",
    Default = false,
    Callback = function(state)
        if state then
            if savedFishingPos and savedFishingLook then
                local hrp = player.Character and player.Character:WaitForChild("HumanoidRootPart")
                local targetPos = savedFishingPos + Vector3.new(0,5,0)
                local lookTarget = targetPos + savedFishingLook
                hrp.CFrame = CFrame.new(targetPos, lookTarget)
                Window:Notify({ Title = "Teleport", Description = "Teleported to saved location", Lifetime = 4 })
            else
                Window:Notify({ Title = "Teleport", Description = "No saved location found", Lifetime = 4 })
                teleportSavedToggle:SetState(false)
            end
        else
            -- turning off does nothing special
        end
    end
})

-- Auto Reset If Stuck (Main)
local autoResetStuckToggle = mainLeft:Toggle({
    Name = "Auto Reset If Stuck",
    Default = false,
    Callback = function(state)
        Window:Notify({ Title = "Auto Reset", Description = state and "Auto Reset If Stuck enabled" or "Auto Reset If Stuck disabled", Lifetime = 4 })
    end
})

-- Auto Sell (Main right)
local autoSellToggle = mainRight:Toggle({
    Name = "Sell All Fish (Auto Sell)",
    Default = false,
    Callback = function(val)
        Window:Notify({ Title = "Auto Sell", Description = val and "Auto selling fish started" or "Auto selling fish stopped", Lifetime = 4 })
    end
})

-- Event tab: dropdown + refresh + teleport toggle
local EventFolder = workspace:FindFirstChild("!!! MENU RINGS") and workspace["!!! MENU RINGS"]:FindFirstChild("Props")
local eventOptions = getChildNames(EventFolder)
local autoFishingEventDropdown = eventLeft:Dropdown({
    Name = "Auto Fishing Event",
    Multi = false,
    Options = eventOptions,
    Default = nil,
    Callback = function(selection)
        -- selection available
    end
}, "AutoFishingEvent")

eventLeft:Button({
    Name = "Refresh Events",
    Callback = function()
        EventFolder = workspace:FindFirstChild("!!! MENU RINGS") and workspace["!!! MENU RINGS"]:FindFirstChild("Props")
        if EventFolder then
            autoFishingEventDropdown:UpdateOptions(getChildNames(EventFolder))
            Window:Notify({ Title = "Events", Description = "Events refreshed", Lifetime = 3 })
        else
            autoFishingEventDropdown:UpdateOptions({})
            Window:Notify({ Title = "Events", Description = "Props folder not found", Lifetime = 3 })
        end
    end
})

local teleportEventToggle = eventLeft:Toggle({
    Name = "Teleport To Event",
    Default = false,
    Callback = function(state)
        if state then
            local selected = autoFishingEventDropdown:GetValue()
            if not selected then
                Window:Notify({ Title = "Teleport", Description = "Select an Event first", Lifetime = 4 })
                teleportEventToggle:SetState(false)
                return
            end
            if not canTeleport() then
                Window:Notify({ Title = "Teleport", Description = "Blocked (TeleportSaved active)", Lifetime = 4 })
                teleportEventToggle:SetState(false)
                return
            end
            EventFolder = workspace:FindFirstChild("!!! MENU RINGS") and workspace["!!! MENU RINGS"]:FindFirstChild("Props")
            if not EventFolder then
                Window:Notify({ Title = "Teleport", Description = "Props folder not found", Lifetime = 4 })
                teleportEventToggle:SetState(false)
                return
            end
            local target = EventFolder:FindFirstChild(selected)
            local cf = target and getModelCFrame(target)
            if cf then
                local hrp = player.Character and player.Character:WaitForChild("HumanoidRootPart")
                hrp.CFrame = cf + Vector3.new(0,5,0)
                hrp.Anchored = false
                Window:Notify({ Title = "Teleport", Description = "Found Event: "..selected, Lifetime = 4 })
            else
                Window:Notify({ Title = "Teleport", Description = "Event not found: "..selected, Lifetime = 4 })
            end
        else
            local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
            if hrp then hrp.Anchored = false end
            Window:Notify({ Title = "Teleport", Description = "Unanchored", Lifetime = 3 })
        end
    end
})

-- Teleport tab: dropdowns & buttons
local TeleportParent = workspace:FindFirstChild("!!!! ISLAND LOCATIONS !!!!")
local NPCFolder = workspace:FindFirstChild("NPC")
local MiscFolder = workspace:FindFirstChild("!!! MENU RINGS")

if TeleportParent then
    local islandNames = getChildNames(TeleportParent)
    teleportLeft:Dropdown({
        Name = "Teleport to Island",
        Multi = false,
        Options = islandNames,
        Callback = function(selected)
            if not selected or not canTeleport() then return end
            local cf = getModelCFrame(TeleportParent:FindFirstChild(selected))
            if cf then
                player.Character:WaitForChild("HumanoidRootPart").CFrame = cf + Vector3.new(0,5,0)
                Window:Notify({ Title = "Teleport", Description = "Teleported to Island: "..selected, Lifetime = 4 })
            end
        end
    }, "TeleportIsland")
end

if NPCFolder then
    teleportLeft:Dropdown({
        Name = "Teleport to NPC",
        Multi = false,
        Options = getChildNames(NPCFolder),
        Callback = function(selected)
            if not selected or not canTeleport() then return end
            local cf = getModelCFrame(NPCFolder:FindFirstChild(selected))
            if cf then
                player.Character:WaitForChild("HumanoidRootPart").CFrame = cf + Vector3.new(0,5,0)
                Window:Notify({ Title = "Teleport", Description = "Teleported to NPC: "..selected, Lifetime = 4 })
            end
        end
    }, "TeleportNPC")
end

if MiscFolder then
    teleportLeft:Dropdown({
        Name = "Teleport to Misc",
        Multi = false,
        Options = getChildNames(MiscFolder),
        Callback = function(selected)
            if not selected or not canTeleport() then return end
            local cf = getModelCFrame(MiscFolder:FindFirstChild(selected))
            if cf then
                player.Character:WaitForChild("HumanoidRootPart").CFrame = cf + Vector3.new(0,5,0)
                Window:Notify({ Title = "Teleport", Description = "Teleported to Misc: "..selected, Lifetime = 4 })
            end
        end
    }, "TeleportMisc")
end

-- Teleport buttons (right)
teleportRight:Button({
    Name = "Teleport To Enchanting Altar",
    Callback = function()
        local altar = workspace:FindFirstChild("! ENCHANTING ALTAR !")
        if altar and altar:FindFirstChild("EnchantLocation") then
            local cf = getModelCFrame(altar.EnchantLocation)
            if cf then
                player.Character:WaitForChild("HumanoidRootPart").CFrame = cf
                Window:Notify({ Title = "Teleport", Description = "Teleported to Enchanting Altar", Lifetime = 4 })
            end
        end
    end
})

teleportRight:Button({
    Name = "Ghostfinn Rod Location [Deep Sea Quest]",
    Callback = function()
        local hrp = player.Character and player.Character:WaitForChild("HumanoidRootPart")
        if hrp then
            hrp.CFrame = CFrame.new(
                -3745.10962, -136.108429, -1049.05969,
                 0.962240815,  5.12529708e-09,  0.272199631,
                -1.09520455e-08, 1,             1.98869046e-08,
                -0.272199631,   -2.2117133e-08, 0.962240815
            )
            Window:Notify({ Title = "Teleport", Description = "Teleported to Ghostfinn Rod Location", Lifetime = 4 })
        end
    end
})

teleportRight:Button({
    Name = "Ares Rod Location [3M Coins]",
    Callback = function()
        local menu = workspace:FindFirstChild("!!! MENU RINGS")
        if menu and menu:FindFirstChild("Ares Rod Stand") then
            local cf = getModelCFrame(menu["Ares Rod Stand"])
            if cf then
                player.Character:WaitForChild("HumanoidRootPart").CFrame = cf
                Window:Notify({ Title = "Teleport", Description = "Teleported to Ares Rod Stand", Lifetime = 4 })
            end
        end
    end
})

teleportRight:Button({
    Name = "Angler Rod Location [8M Coins]",
    Callback = function()
        local menu = workspace:FindFirstChild("!!! MENU RINGS")
        if menu and menu:FindFirstChild("Angler Rod Stand") then
            local cf = getModelCFrame(menu["Angler Rod Stand"])
            if cf then
                player.Character:WaitForChild("HumanoidRootPart").CFrame = cf
                Window:Notify({ Title = "Teleport", Description = "Teleported to Angler Rod Stand", Lifetime = 4 })
            end
        end
    end
})

-- Misc tab: fish radar toggle
miscLeft:Toggle({
    Name = "Fish Radar",
    Default = false,
    Callback = function(state)
        if UpdateFishingRadar then
            pcall(function()
                UpdateFishingRadar:InvokeServer(state)
            end)
            Window:Notify({ Title = "Radar", Description = state and "Fish Radar enabled" or "Fish Radar disabled", Lifetime = 3 })
        else
            Window:Notify({ Title = "Radar", Description = "UpdateFishingRadar remote not found", Lifetime = 3 })
        end
    end
})

-- Settings: simple notifications / controls
tabs.Settings:Section({ Side = "Left" }):Label({ Text = "Settings (no save manager in this build)" })

-- CORE BEHAVIOR (non-UI)
-- AutoSell loop
task.spawn(function()
    while task.wait(8) do
        if autoSellToggle:GetState() then
            pcall(function() SellAllItems:InvokeServer() end)
        end
    end
end)

-- AutoFishing loop
task.spawn(function()
    local firstAutoFishingRun = true
    while true do
        if autoFishingToggle:GetState() then
            if firstAutoFishingRun then task.wait(3); firstAutoFishingRun = false end
            -- equip & simulate fishing
            pcall(function()
                EquipToolFromHotbar:FireServer(1)
                task.wait(0.4)
                ChargeFishingRod:InvokeServer(1758804029.427071)
                task.wait(0.4)
                RequestFishingMinigameStarted:InvokeServer(-1.233184814453125, 0.9974901105656968)
                task.wait(0.4)
                local delayTime = tonumber(fishingDelayInput:GetValue()) or 4
                task.wait(delayTime)
                FishingCompleted:FireServer()
            end)
            task.wait(1)
        else
            task.wait(0.5)
        end
    end
end)

-- Auto Reset If Stuck: check child[8] missing continuously for 20s
task.spawn(function()
    while task.wait(1) do
        if autoResetStuckToggle:GetState() then
            local stuckTime = 0
            while autoResetStuckToggle:GetState() do
                -- reset stuckTime on respawn
                local respawnConn
                respawnConn = player.CharacterAdded:Connect(function()
                    stuckTime = 0
                    if respawnConn then respawnConn:Disconnect(); respawnConn = nil end
                end)

                local display = player:FindFirstChild("PlayerGui")
                    and player.PlayerGui:FindFirstChild("Backpack")
                    and player.PlayerGui.Backpack:FindFirstChild("Display")
                local fishSlot = display and display:GetChildren()[8]
                if not fishSlot then
                    stuckTime = stuckTime + 1
                    if stuckTime >= 20 then
                        local hum = player.Character and player.Character:FindFirstChild("Humanoid")
                        if hum then
                            hum.Health = 0
                            Window:Notify({ Title = "Auto Reset", Description = "No Fish Found - Resetting", Lifetime = 4 })
                        end
                        stuckTime = 0
                    end
                else
                    stuckTime = 0
                end
                task.wait(1)
            end
        end
    end
end)

-- Detect zero HP & auto re-enable toggles after respawn
local function handleDeath()
    if autoFishingToggle:GetState() then autoFishingToggle:SetState(false) end
    if teleportSavedToggle:GetState() then teleportSavedToggle:SetState(false) end

    -- Wait for new character and humanoid
    local newChar = player.CharacterAdded:Wait()
    local newHum = newChar:WaitForChild("Humanoid")
    repeat task.wait() until newHum.Health > 0
    task.wait(3)
    if newHum.Health > 0 then
        autoFishingToggle:SetState(true)
        teleportSavedToggle:SetState(true)
    end
end

task.spawn(function()
    while task.wait(1) do
        local char = player.Character
        local hum = char and char:FindFirstChild("Humanoid")
        if hum and hum.Health <= 0 then
            handleDeath()
        end
    end
end)

-- Anti-AFK
task.spawn(function()
    local VirtualUser = game:GetService("VirtualUser")
    player.Idled:Connect(function()
        VirtualUser:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
        task.wait(1)
        VirtualUser:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
    end)
end)

MacLib:SetFolder("Maclib")
tabs.Settings:InsertConfigSection("Left")

Window.onUnloaded(function()
	print("Unloaded!")
end)

tabs.Main:Select()
MacLib:LoadAutoLoadConfig()
